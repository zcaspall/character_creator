create table "public"."SessionNotes" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "game_id" bigint,
    "note" text
);


alter table "public"."SessionNotes" enable row level security;

CREATE UNIQUE INDEX "SessionNotes_pkey" ON public."SessionNotes" USING btree (id);

alter table "public"."SessionNotes" add constraint "SessionNotes_pkey" PRIMARY KEY using index "SessionNotes_pkey";

alter table "public"."SessionNotes" add constraint "SessionNotes_game_id_fkey" FOREIGN KEY (game_id) REFERENCES "Games"(id) ON DELETE CASCADE not valid;

alter table "public"."SessionNotes" validate constraint "SessionNotes_game_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.create_user_on_signup()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into public."Users" (id)
  select new.id
  end;
  return new;
end;
$function$
;

grant delete on table "public"."SessionNotes" to "anon";

grant insert on table "public"."SessionNotes" to "anon";

grant references on table "public"."SessionNotes" to "anon";

grant select on table "public"."SessionNotes" to "anon";

grant trigger on table "public"."SessionNotes" to "anon";

grant truncate on table "public"."SessionNotes" to "anon";

grant update on table "public"."SessionNotes" to "anon";

grant delete on table "public"."SessionNotes" to "authenticated";

grant insert on table "public"."SessionNotes" to "authenticated";

grant references on table "public"."SessionNotes" to "authenticated";

grant select on table "public"."SessionNotes" to "authenticated";

grant trigger on table "public"."SessionNotes" to "authenticated";

grant truncate on table "public"."SessionNotes" to "authenticated";

grant update on table "public"."SessionNotes" to "authenticated";

grant delete on table "public"."SessionNotes" to "service_role";

grant insert on table "public"."SessionNotes" to "service_role";

grant references on table "public"."SessionNotes" to "service_role";

grant select on table "public"."SessionNotes" to "service_role";

grant trigger on table "public"."SessionNotes" to "service_role";

grant truncate on table "public"."SessionNotes" to "service_role";

grant update on table "public"."SessionNotes" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."SessionNotes"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read for authenticated users only"
on "public"."SessionNotes"
as permissive
for select
to authenticated
using (true);


create policy "Enable update for authenticated users"
on "public"."SessionNotes"
as permissive
for update
to authenticated
using (true);



